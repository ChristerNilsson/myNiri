// Generated by CoffeeScript 2.7.0
var DIR, DN, LT, RT, SPC, UP, calcNode, created, curr, drawNode, echo, exitPoint, extras, findTarget, inside, keyPressed, makeExtra, range, setup, tree, xdraw;

echo = console.log;

range = _.range;

SPC = ' '; // Indikerar förgrening

tree = {};

//tree = {0: 'A'} # index 0 är roten. barnen till noden i ligger i 2*i+1 och 2*i+2
//tree = {0:SPC, 1:'A', 2:SPC, 5:'B', 6:SPC, 13:'D', 14:' ', 29:'F', 30:'G' } # index 0 är roten. barnen till noden i ligger i 2*i+1 och 2*i+2
extras = {}; // x,y,left,right,down,up

DIR = 'R L D U'.split(' ');

RT = 0;

LT = 1;

DN = 2;

UP = 3;

curr = 0;

created = 0;

drawNode = function(i, x, y, w, h) {
  var letter;
  if (!(i in tree)) {
    return;
  }
  if (curr === -1) {
    return;
  }
  letter = tree[i];
  if (letter !== SPC) {
    noFill();
    stroke('black');
    rect(x, y, w, h);
    noStroke();
    textSize((w + h) / 4);
    fill(curr === i ? 'yellow' : 'black');
    return text(letter, x + w / 2, y + h / 2);
  } else {
    if (w > h) {
      drawNode(2 * i + 1, x, y, w / 2, h);
      return drawNode(2 * i + 2, x + w / 2, y, w / 2, h);
    } else {
      drawNode(2 * i + 1, x, y, w, h / 2);
      return drawNode(2 * i + 2, x, y + h / 2, w, h / 2);
    }
  }
};

calcNode = function(i, x, y, w, h) { // Beräkna x och y för alla synliga tiles
  var name;
  //echo 'calcNode',tree[i],x,y,w,h
  if (!(i in tree)) {
    return;
  }
  if (curr === -1) {
    return;
  }
  name = tree[i];
  if (name !== SPC) {
    return extras[i] = {name, x, y, w, h};
  } else {
    if (w > h) {
      calcNode(2 * i + 1, x, y, w / 2, h);
      return calcNode(2 * i + 2, x + w / 2, y, w / 2, h);
    } else {
      calcNode(2 * i + 1, x, y, w, h / 2);
      return calcNode(2 * i + 2, x, y + h / 2, w, h / 2);
    }
  }
};

exitPoint = function(dir, extra) {
  var h, w, x, y;
  ({x, y, w, h} = extra);
  if (dir === RT) {
    return {
      x: x + w,
      y: y + h / 2
    };
  }
  if (dir === LT) {
    return {
      x: x,
      y: y + h / 2
    };
  }
  if (dir === DN) {
    return {
      x: x + w / 2,
      y: y + h
    };
  }
  if (dir === UP) {
    return {
      x: x + w / 2,
      y: y
    };
  }
  return {
    x: -999,
    y: -999
  };
};

inside = function(rect, ep) {
  var h, ref, ref1, w, x, y;
  ({x, y, w, h} = rect);
  return (x <= (ref = ep.x) && ref <= x + w) && (y <= (ref1 = ep.y) && ref1 <= y + h);
};

findTarget = function(dir) {
  var ep, extra, j, key2, len, ref, targets;
  extras = {};
  calcNode(0, 0, 0, width, height);
  extra = extras[curr];
  ep = exitPoint(dir, extra);
  targets = [];
  ref = _.keys(extras);
  for (j = 0, len = ref.length; j < len; j++) {
    key2 = ref[j];
    if (str(curr) === key2) {
      continue;
    }
    extra = extras[key2];
    if (inside(extra, ep)) {
      targets.push({
        size: extra.w * extra.h,
        key: int(key2)
      });
    }
  }
  if (targets.length > 0) {
    targets.sort(function(a, b) {
      return b.size - a.size;
    });
    return curr = int(targets[0].key);
  }
};

setup = function() {
  createCanvas(500, 400);
  textAlign(CENTER, CENTER);
  strokeWeight(2);
  echo(tree);
  return xdraw();
};

xdraw = function() {
  background('gray');
  return drawNode(0, 0, 0, width, height);
};

makeExtra = function() {
  var i, j, len, ref;
  extras = {};
  calcNode(0, 0, 0, width, height);
  ref = range(4);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    setDirections(i);
  }
  return echo('makeExtra', extras);
};

keyPressed = function() {
  var left, newNode, other, parent, right;
  if (key === 'n') {
    newNode = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[created];
    created += 1;
    if (0 === _.size(tree)) {
      tree[0] = newNode;
      curr = 0;
    } else {
      left = 2 * curr + 1;
      right = 2 * curr + 2;
      tree[left] = tree[curr];
      tree[curr] = SPC;
      tree[right] = newNode;
      curr = right;
    }
    // makeExtra()
    echo('Insert', curr, tree);
  }
  if (key === 'Delete') {
    if (curr === -1) {
      return;
    }
    if (1 === _.size(tree)) {
      tree = {};
      curr = -1;
    } else {
      parent = Math.floor((curr - 1) / 2);
      left = 2 * parent + 1;
      right = 2 * parent + 2;
      other = right === curr ? left : right;
      tree[parent] = tree[other];
      delete tree[right];
      delete tree[left];
      curr = parent;
    }
    echo('Delete', curr, tree);
  }
  // if _.includes 'ABCDEFGHabcdefgh', key
  // 	for k in _.keys tree 
  // 		if tree[k] == key.toUpperCase() then curr = int(k)
  if (key === 'ArrowRight') {
    findTarget(RT);
  }
  if (key === 'ArrowLeft') {
    findTarget(LT);
  }
  if (key === 'ArrowDown') {
    findTarget(DN);
  }
  if (key === 'ArrowUp') {
    findTarget(UP);
  }
  // move left, right, down, up saknas
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\myNiri\coffee\hypr.coffee