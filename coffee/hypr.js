// Generated by CoffeeScript 2.7.0
var Node, created, curr, echo, keyPressed, range, setup, tree, xdraw,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

echo = console.log;

range = _.range;

tree = [
  ' ',
  'A',
  'B' // index 0 Ã¤r roten. barnen till noden i ligger i 2*i och 2*i+1
];

curr = tree;

created = 0;

Node = class Node {
  constructor(letter, left = null, right = null) {
    this.letter = letter;
    this.left = left;
    this.right = right;
    this.parent = null;
  }

  draw(x, y, dx, dy) {
    if (this.letter) {
      noFill();
      stroke('black');
      rect(x - dx, y - dy, 2 * dx, 2 * dy);
      fill(curr.letter === this.letter ? 'yellow' : 'black');
      noStroke();
      textSize((dx + dy) / 2);
      return text(this.letter, x, y);
    } else {
      if (dx > dy) {
        if (this.left) {
          this.left.draw(x - dx / 2, y, dx / 2, dy);
        }
        if (this.right) {
          return this.right.draw(x + dx / 2, y, dx / 2, dy);
        }
      } else {
        if (this.left) {
          this.left.draw(x, y - dy / 2, dx, dy / 2);
        }
        if (this.right) {
          return this.right.draw(x, y + dy / 2, dx, dy / 2);
        }
      }
    }
  }

};

setup = function() {
  createCanvas(600, 500);
  textAlign(CENTER, CENTER);
  strokeWeight(2);
  curr = null;
  echo(tree);
  return xdraw();
};

xdraw = function() {
  background('gray');
  if (tree) {
    return tree.draw(width / 2, height / 2, width / 2, height / 2);
  }
};

keyPressed = function() {
  var newNode, other, parent;
  echo(key);
  if (key === 'n') {
    newNode = new Node("ABCDEFGHIJKLMNOPQRSTUVWXYZ"[created]);
    created += 1;
    if (tree === null) {
      tree = newNode;
      curr = newNode;
    } else {
      parent = curr;
      curr.left = new Node(curr.letter);
      curr.left.parent = parent;
      curr.right = newNode;
      curr.right.parent = parent;
      curr.parent = parent;
      curr.letter = null;
      curr = curr.right;
    }
    echo('tree', tree);
  }
  if (key === 'Delete') {
    parent = curr.parent;
    if (parent.right === curr) {
      other = parent.left;
      parent.left = other.left;
      parent.right = other.right;
      parent.letter = other.letter;
    } else {
      other = parent.right;
      parent.left = other.left;
      parent.right = other.right;
      parent.letter = other.letter;
    }
    curr = parent;
    echo('curr', curr);
  }
  //###
  if (key === 'ArrowLeft') {
    curr = modulo(curr - 1, tiles.length);
  }
  if (key === 'ArrowRight') {
    curr = modulo(curr + 1, tiles.length);
  }
  if (key === 'a') { // move left
    other = modulo(curr - 1, n);
    [tiles[curr], tiles[other]] = [tiles[other], tiles[curr]];
    curr = other;
  }
  if (key === 'd') { // move right
    other = modulo(curr + 1, n);
    [tiles[curr], tiles[other]] = [tiles[other], tiles[curr]];
    curr = other;
  }
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHlwci5qcyIsInNvdXJjZVJvb3QiOiIuLlxcIiwic291cmNlcyI6WyJjb2ZmZWVcXGh5cHIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQTtFQUFBOztBQUFBLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBQ2YsS0FBQSxHQUFRLENBQUMsQ0FBQzs7QUFFVixJQUFBLEdBQU87RUFBQyxHQUFEO0VBQU0sR0FBTjtFQUFXLEdBQVg7OztBQUNQLElBQUEsR0FBTzs7QUFFUCxPQUFBLEdBQVU7O0FBRUosT0FBTixNQUFBLEtBQUE7RUFDQyxXQUFjLE9BQUEsU0FBZSxJQUFmLFVBQTRCLElBQTVCLENBQUE7SUFBQyxJQUFDLENBQUE7SUFBTyxJQUFDLENBQUE7SUFBVyxJQUFDLENBQUE7SUFDbkMsSUFBQyxDQUFBLE1BQUQsR0FBVTtFQURHOztFQUVkLElBQU8sQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLEVBQUwsRUFBUSxFQUFSLENBQUE7SUFDTixJQUFHLElBQUMsQ0FBQSxNQUFKO01BQ0MsTUFBQSxDQUFBO01BQ0EsTUFBQSxDQUFPLE9BQVA7TUFDQSxJQUFBLENBQUssQ0FBQSxHQUFFLEVBQVAsRUFBVyxDQUFBLEdBQUUsRUFBYixFQUFpQixDQUFBLEdBQUUsRUFBbkIsRUFBdUIsQ0FBQSxHQUFFLEVBQXpCO01BQ0EsSUFBQSxDQUFRLElBQUksQ0FBQyxNQUFMLEtBQWUsSUFBQyxDQUFBLE1BQW5CLEdBQStCLFFBQS9CLEdBQTZDLE9BQWxEO01BQ0EsUUFBQSxDQUFBO01BQ0EsUUFBQSxDQUFTLENBQUMsRUFBQSxHQUFHLEVBQUosQ0FBQSxHQUFRLENBQWpCO2FBQ0EsSUFBQSxDQUFLLElBQUMsQ0FBQSxNQUFOLEVBQWEsQ0FBYixFQUFlLENBQWYsRUFQRDtLQUFBLE1BQUE7TUFTQyxJ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QyxLQUFQLEdBQWUsS0FBSyxDQUFDO01BQ3JCLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLEtBQUssQ0FBQyxPQVR2Qjs7SUFVQSxJQUFBLEdBQU87SUFDUCxJQUFBLENBQUssTUFBTCxFQUFZLElBQVosRUFiRDtHQW5CRDs7RUFvQ0MsSUFBRyxHQUFBLEtBQU8sV0FBVjtJQUEyQixJQUFBLFVBQVEsSUFBQSxHQUFLLEdBQU0sS0FBSyxDQUFDLFFBQXBEOztFQUNBLElBQUcsR0FBQSxLQUFPLFlBQVY7SUFBNEIsSUFBQSxVQUFRLElBQUEsR0FBSyxHQUFNLEtBQUssQ0FBQyxRQUFyRDs7RUFFQSxJQUFHLEdBQUEsS0FBTyxHQUFWO0lBQ0MsS0FBQSxVQUFTLElBQUEsR0FBSyxHQUFNO0lBQ3BCLENBQUMsS0FBSyxDQUFDLElBQUQsQ0FBTixFQUFjLEtBQUssQ0FBQyxLQUFELENBQW5CLENBQUEsR0FBOEIsQ0FBQyxLQUFLLENBQUMsS0FBRCxDQUFOLEVBQWUsS0FBSyxDQUFDLElBQUQsQ0FBcEI7SUFDOUIsSUFBQSxHQUFPLE1BSFI7O0VBS0EsSUFBRyxHQUFBLEtBQU8sR0FBVjtJQUNDLEtBQUEsVUFBUyxJQUFBLEdBQUssR0FBTTtJQUNwQixDQUFDLEtBQUssQ0FBQyxJQUFELENBQU4sRUFBYyxLQUFLLENBQUMsS0FBRCxDQUFuQixDQUFBLEdBQThCLENBQUMsS0FBSyxDQUFDLEtBQUQsQ0FBTixFQUFlLEtBQUssQ0FBQyxJQUFELENBQXBCO0lBQzlCLElBQUEsR0FBTyxNQUhSOztTQU1BLEtBQUEsQ0FBQTtBQW5EWSIsInNvdXJjZXNDb250ZW50IjpbImVjaG8gPSBjb25zb2xlLmxvZ1xyXG5yYW5nZSA9IF8ucmFuZ2VcclxuXHJcbnRyZWUgPSBbJyAnLCAnQScsICdCJ10gIyBpbmRleCAwIMOkciByb3Rlbi4gYmFybmVuIHRpbGwgbm9kZW4gaSBsaWdnZXIgaSAyKmkgb2NoIDIqaSsxXHJcbmN1cnIgPSB0cmVlXHJcbiBcclxuY3JlYXRlZCA9IDBcclxuXHJcbmNsYXNzIE5vZGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbGV0dGVyLEBsZWZ0PW51bGwsIEByaWdodD1udWxsKSAtPlxyXG5cdFx0QHBhcmVudCA9IG51bGxcclxuXHRkcmF3IDogKHgseSxkeCxkeSkgLT5cclxuXHRcdGlmIEBsZXR0ZXJcclxuXHRcdFx0bm9GaWxsKClcclxuXHRcdFx0c3Ryb2tlICdibGFjaydcclxuXHRcdFx0cmVjdCB4LWR4LCB5LWR5LCAyKmR4LCAyKmR5XHJcblx0XHRcdGZpbGwgaWYgY3Vyci5sZXR0ZXIgPT0gQGxldHRlciB0aGVuICd5ZWxsb3cnIGVsc2UgJ2JsYWNrJ1xyXG5cdFx0XHRub1N0cm9rZSgpXHJcblx0XHRcdHRleHRTaXplIChkeCtkeSkvMlxyXG5cdFx0XHR0ZXh0IEBsZXR0ZXIseCx5XHJcblx0XHRlbHNlXHJcblx0XHRcdGlmIGR4ID4gZHkgXHJcblx0XHRcdFx0aWYgQGxlZnQgdGhlbiBAbGVmdC5kcmF3IHgtZHgvMiwgeSwgZHgvMiwgZHlcclxuXHRcdFx0XHRpZiBAcmlnaHQgdGhlbiBAcmlnaHQuZHJhdyB4K2R4LzIsIHksIGR4LzIsIGR5XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpZiBAbGVmdCB0aGVuIEBsZWZ0LmRyYXcgIHgsIHktZHkvMiwgZHgsIGR5LzJcclxuXHRcdFx0XHRpZiBAcmlnaHQgdGhlbiBAcmlnaHQuZHJhdyB4LCB5K2R5LzIsIGR4LCBkeS8yXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0Y3JlYXRlQ2FudmFzIDYwMCw1MDBcclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHN0cm9rZVdlaWdodCAyXHJcblx0Y3VyciA9IG51bGxcclxuXHRlY2hvIHRyZWVcclxuXHR4ZHJhdygpXHJcblxyXG54ZHJhdyA9IC0+XHJcblx0YmFja2dyb3VuZCAnZ3JheSdcclxuXHRpZiB0cmVlIHRoZW4gdHJlZS5kcmF3IHdpZHRoLzIsIGhlaWdodC8yLCB3aWR0aC8yLCBoZWlnaHQvMlxyXG5cclxua2V5UHJlc3NlZCA9IC0+XHJcblx0ZWNobyBrZXlcclxuXHJcblx0aWYga2V5ID09ICduJ1xyXG5cdFx0bmV3Tm9kZSA9IG5ldyBOb2RlKFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcIltjcmVhdGVkXSlcclxuXHRcdGNyZWF0ZWQgKz0gMVxyXG5cdFx0aWYgdHJlZSA9PSBudWxsIFxyXG5cdFx0XHR0cmVlID0gbmV3Tm9kZVxyXG5cdFx0XHRjdXJyID0gbmV3Tm9kZVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRwYXJlbnQgPSBjdXJyXHJcblx0XHRcdGN1cnIubGVmdCA9IG5ldyBOb2RlIGN1cnIubGV0dGVyXHJcblx0XHRcdGN1cnIubGVmdC5wYXJlbnQgPSBwYXJlbnRcclxuXHRcdFx0Y3Vyci5yaWdodCA9IG5ld05vZGVcclxuXHRcdFx0Y3Vyci5yaWdodC5wYXJlbnQgPSBwYXJlbnRcclxuXHRcdFx0Y3Vyci5wYXJlbnQgPSBwYXJlbnRcclxuXHRcdFx0Y3Vyci5sZXR0ZXIgPSBudWxsXHJcblx0XHRcdGN1cnIgPSBjdXJyLnJpZ2h0XHJcblx0XHRlY2hvICd0cmVlJyx0cmVlXHJcblxyXG5cdGlmIGtleSA9PSAnRGVsZXRlJ1xyXG5cdFx0cGFyZW50ID0gY3Vyci5wYXJlbnRcclxuXHRcdGlmIHBhcmVudC5yaWdodCA9PSBjdXJyXHJcblx0XHRcdG90aGVyID0gcGFyZW50LmxlZnRcclxuXHRcdFx0cGFyZW50LmxlZnQgPSBvdGhlci5sZWZ0XHJcblx0XHRcdHBhcmVudC5yaWdodCA9IG90aGVyLnJpZ2h0XHJcblx0XHRcdHBhcmVudC5sZXR0ZXIgPSBvdGhlci5sZXR0ZXJcclxuXHRcdGVsc2VcclxuXHRcdFx0b3RoZXIgPSBwYXJlbnQucmlnaHRcclxuXHRcdFx0cGFyZW50LmxlZnQgPSBvdGhlci5sZWZ0XHJcblx0XHRcdHBhcmVudC5yaWdodCA9IG90aGVyLnJpZ2h0XHJcblx0XHRcdHBhcmVudC5sZXR0ZXIgPSBvdGhlci5sZXR0ZXJcclxuXHRcdGN1cnIgPSBwYXJlbnRcclxuXHRcdGVjaG8gJ2N1cnInLGN1cnJcclxuXHJcblx0IyMjI1xyXG5cclxuXHRpZiBrZXkgPT0gJ0Fycm93TGVmdCcgdGhlbiBjdXJyID0gKGN1cnItMSkgJSUgdGlsZXMubGVuZ3RoXHJcblx0aWYga2V5ID09ICdBcnJvd1JpZ2h0JyB0aGVuIGN1cnIgPSAoY3VycisxKSAlJSB0aWxlcy5sZW5ndGhcclxuXHJcblx0aWYga2V5ID09ICdhJyAjIG1vdmUgbGVmdFxyXG5cdFx0b3RoZXIgPSAoY3Vyci0xKSAlJSBuXHJcblx0XHRbdGlsZXNbY3Vycl0sIHRpbGVzW290aGVyXV0gPSBbdGlsZXNbb3RoZXJdLCB0aWxlc1tjdXJyXV1cclxuXHRcdGN1cnIgPSBvdGhlclxyXG5cclxuXHRpZiBrZXkgPT0gJ2QnICMgbW92ZSByaWdodFxyXG5cdFx0b3RoZXIgPSAoY3VycisxKSAlJSBuXHJcblx0XHRbdGlsZXNbY3Vycl0sIHRpbGVzW290aGVyXV0gPSBbdGlsZXNbb3RoZXJdLCB0aWxlc1tjdXJyXV1cclxuXHRcdGN1cnIgPSBvdGhlclxyXG5cclxuXHJcblx0eGRyYXcoKVxyXG4iXX0=
//# sourceURL=c:\github\myNiri\coffee\hypr.coffee